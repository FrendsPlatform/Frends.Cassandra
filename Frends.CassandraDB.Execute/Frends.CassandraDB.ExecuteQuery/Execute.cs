using System.ComponentModel;
using System;
using System.Threading;
using System.Collections.Generic;
using System.Data;
using Cassandra;
using Cassandra.DataStax.Auth;
using Frends.CassandraDB.ExecuteQuery.Definitions;
using Newtonsoft.Json.Linq;

namespace Frends.CassandraDB.ExecuteQuery;

/// <summary>
/// CassandraDB Task.
/// </summary>
public static class CassandraDB
{
    /// <summary>
    /// CassandraDB Execute operation.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.CassandraDB.ExecuteQuery)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, JToken QueryResults, List&lt;string&gt; Warnings }</returns>
    public static Result ExecuteQuery([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        var warnings = new List<string>();
        var cluster = GetCluster(input);

        try
        {
            var statement = string.IsNullOrWhiteSpace(input.AsUser)
                ? new SimpleStatement(input.Query)
                : new SimpleStatement(input.Query).ExecutingAs(input.AsUser);
            var rowSet = cluster.Execute(statement);
            
            var dataTable = CassandraRowSetToDataTable(rowSet);

            if (rowSet.Info.Warnings != null)
            {
                warnings.AddRange(rowSet.Info.Warnings);
            }

            return new Result(
                rowSet.IsFullyFetched,
                JToken.FromObject(dataTable),
                warnings.Count > 0 ? warnings : null);
        }
        finally
        {
            cluster.ShutdownAsync().Wait(cancellationToken);
        }
    }
    
    private static DataTable CassandraRowSetToDataTable(RowSet rowSet)
    {
        var dataTable = new DataTable();
        var columns = rowSet.Columns;
        foreach (var column in columns)
        {
            dataTable.Columns.Add(column.Name, column.Type);
        }

        foreach (var row in rowSet)
        {
            var dataRow = dataTable.NewRow();
            for (var i = 0; i < columns.Length; i++)
            {
                dataRow[i] = row[i];
            }

            dataTable.Rows.Add(dataRow);
        }

        return dataTable;
    }

    private static ISession GetCluster(Input input)
    {
        var builder = Cluster
            .Builder()
            .AddContactPoints(GetContactPoints(input))
            .WithPort(input.Port);
        switch (input.AuthenticationMethods)
        {
            case AuthenticationMethods.None:
                // The builder is already configured enough
                break;

            case AuthenticationMethods.PlainTextAuthProvider:
                builder = builder.WithCredentials(input.Username, input.Password);
                break;

            case AuthenticationMethods.DsePlainTextAuthProvider:
                var dsePlainTextAuthProvider = string.IsNullOrWhiteSpace(input.AsUser)
                    ? new DsePlainTextAuthProvider(input.Username, input.Password)
                    : new DsePlainTextAuthProvider(input.Username, input.Password, input.AsUser);
                builder = builder.WithAuthProvider(dsePlainTextAuthProvider);
                break;

            default:
                throw new Exception("GetCluster error: Authentication method not supported.");
        }

        if (input.UseSsl)
        {
            var cert = input.CreateCertificate();
            var ssl = new SSLOptions().SetCertificateCollection(cert);
            builder = builder.WithSSL(ssl);
        }

        var cluster = builder.Build();

        var session = string.IsNullOrWhiteSpace(input.Keyspace)
                    ? cluster.Connect()
                    : cluster.Connect(input.Keyspace);

        return session;
    }

    private static string[] GetContactPoints(Input input)
    {
        var cps = new List<string>();

        foreach (var i in input.ContactPoints)
            cps.Add(i.Value);

        return cps.ToArray();
    }
}